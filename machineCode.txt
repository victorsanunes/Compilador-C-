while(p != NULL){
    if(!strcmp(p->campo1, "lab")){
        // if(funcaoComRetorno == -1 ){
        // 	funcaoComRetorno = 2;
        // }
        switch (p->flagCampo2) {
            //Vazio
            case 0:
                break;
            //Temporario
            case 1:
                break;

            //Constante
            case 2:
                break;

            //Hash
            case 3:

                hashIndex = p->campo2;
                b = hashTable[hashIndex];
                memlocFuncaoAnterior = memlocFuncaoAtual;
                memlocFuncaoAtual = b->memloc;
                primeiraFuncaoDeclarada++;

                //Checa se a fucao anterior teve retorno
                // if( funcaoComRetorno == 1){
                // 	elemento2->campo1 = "MOVE";
                // 	reg1 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                // 	if(reg1 != -1){
                // 		elemento2->campo2 = reg1;
                // 		elemento2->campo3 = 0;
                // 		elemento2->campo4 = fimDoBancoDeRegistradores - 2;
                // 		elemento2->flagCampo2 = 7;
                // 		elemento2->flagCampo3 = 0;
                // 		elemento2->flagCampo4 = 7;
                // 		insereFinal(codigo_de_maquina, *elemento2);
                // 		posicaoMemoriaDeInstrucoes++;
                // 		quadraReset(elemento2);
                // 	}
                //
                // 	elemento2->campo1 = "JUMPR";
                // 	elemento2->campo2 = reg1;
                // 	elemento2->campo3 = reg1;
                // 	elemento2->campo4 = 0;
                // 	elemento2->flagCampo2 = 7;
                // 	elemento2->flagCampo3 = 7;
                // 	elemento2->flagCampo4 = 0;
                // 	insereFinal(codigo_de_maquina, *elemento2);
                // 	posicaoMemoriaDeInstrucoes++;
                // 	quadraReset(elemento2);
                // 	setRegistradorLivre(bancoDeRegistradores, reg1);
                // 	funcaoComRetorno = 0;
                // }

                //Checa par imprimir jump de volta a posicao de chamada
                if(primeiraFuncaoDeclarada > 1){
                    hashIndex = p->campo2;
                    b = hashTable[hashIndex];

                    //Guarda o valor do retorno da funcao
                    elemento2->campo1 = "LOAD";
                    // elemento2->campo2 = fimDoBancoDeRegistradores;
                    reg1 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                    elemento2->campo2 = reg1;
                    elemento2->campo4 = memlocFuncaoAnterior;
                    elemento2->campo3 = 0;
                    elemento2->flagCampo2 = 7;
                    elemento2->flagCampo3 = 0;
                    elemento2->flagCampo4 = 8;
                    insereFinal(codigo_de_maquina, *elemento2);
                    posicaoMemoriaDeInstrucoes++;

                    hashIndex = p->campo2;
                    b = hashTable[hashIndex];

                    elemento2->campo1 = "JUMPR";
                    elemento2->campo2 = reg1;
                    elemento2->campo3 = reg1;
                    elemento2->campo4 = 0;
                    elemento2->flagCampo2 = 7;
                    elemento2->flagCampo3 = 7;
                    elemento2->flagCampo4 = 0;
                    insereFinal(codigo_de_maquina, *elemento2);
                    posicaoMemoriaDeInstrucoes++;
                    quadraReset(elemento2);
                    setRegistradorLivre(bancoDeRegistradores, reg1);
                    funcaoComRetorno = 0;
                }

                hashIndex = p->campo2;
                b = hashTable[hashIndex];
                // posicaoDeFuncoes[p->campo2] = posicaoMemoriaDeInstrucoes - 3;
                posicaoDeFuncoes[p->campo2] = posicaoMemoriaDeInstrucoes;

                elemento2->campo1 = "LAB";
                elemento2->campo2 = p->campo2;
                elemento2->campo3 = 0;
                elemento2->campo4 = 0;
                elemento2->flagCampo2 = 3;
                elemento2->flagCampo3 = 0;
                elemento2->flagCampo4 = 0;
                // fprintf(stdout, "%d\n", posicaoMemoriaDeInstrucoes);
                insereFinal(codigo_de_maquina, *elemento2);
                quadraReset(elemento2);
                break;
            //Char
            case 4:
                break;
            //Label
            case 5:
                elemento2->campo1 = "LAB";
                elemento2->campo2 = p->campo2;
                enderecoLabel[p->campo2] = posicaoMemoriaDeInstrucoes;
                // qtd_instrucoes = p->campo2;
                elemento2->campo3 = 0;
                elemento2->campo4 = 0;
                elemento2->flagCampo2 = 5;
                elemento2->flagCampo3 = 0;
                elemento2->flagCampo4 = 0;
                insereFinal(codigo_de_maquina, *elemento2);
                // imprimeQuadra(elemento2);
                quadraReset(elemento2);

                break;
            //Quantidade de parametros
            case 6:
                break;
            //Inativo
            case -1:
                break;
        }

        switch (p->flagCampo3) {
            //Vazio
            case 0:
                break;
            //Temporario
            case 1:
                break;

            //Constante
            case 2:
                break;

            //Hash
            case 3:

                break;
            //Char
            case 4:
                break;
            //Label
            case 5:
                break;
            //Quantidade de parametros
            case 6:
                break;
            //Inativo
            case -1:
                break;
        }

        switch (p->flagCampo4) {
            //Vazio
            case 0:
                break;
            //Temporario
            case 1:
                break;

            //Constante
            case 2:
                break;

            //Hash
            case 3:
                break;
            //Char
            case 4:
                break;
            //Label
            case 5:
                break;
            //Quantidade de parametros
            case 6:
                break;
            //Inativo
            case -1:
                break;
        }
    }
    else if(!strcmp(p->campo1, "asg")){
        switch (p->flagCampo2) {
            //Temporario
            case 1:

                if(chamadaDeFuncao){
                    elemento2->campo2 = reg1;
                    elemento2->flagCampo2 = 7;
                    chamadaDeFuncao = 0;
                }
                reg1 = registradoresTemporarios[p->campo2];
                break;

            //Constante
            case 2:
                //Carrega a constante em um reg
                elemento2->campo1 = "LOADI";
                elemento2->campo4 = p->campo2;
                elemento2->flagCampo4 = 2;
                elemento2->campo3 = 0;
                elemento2->flagCampo3 = 0;
                reg1 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                if(reg1 != -1){
                    elemento2->campo2 = reg1;
                    setRegistradorUsado(bancoDeRegistradores, reg1);
                    elemento2->flagCampo2 = 7;
                    insereFinal(codigo_de_maquina, *elemento2);
                    posicaoMemoriaDeInstrucoes++;
                    // quadraReset(elemento2);
                }
                break;

            //Hash
            case 3:
                // Atribuicao do tipo: var1 = var2
                if(p->flagVetor == 0) {
                    elemento2->campo1 = "LOAD";
                    hashIndex = p->campo2;
                    b = hashTable[hashIndex];
                    elemento2->campo4 = b->memloc;
                    elemento2->flagCampo4 = 8;
                    elemento2->flagCampo3 = 0;
                    elemento2->campo3 = 0;
                    reg1 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                    if(reg1 != -1){
                        elemento2->flagCampo2 = 7;
                        elemento2->campo2 = reg1;
                        setRegistradorUsado(bancoDeRegistradores, reg1);
                        insereFinal(codigo_de_maquina, *elemento2);
                        posicaoMemoriaDeInstrucoes++;
                    }
                }

                else if(p->flagVetor == 2){

                    //Carrega o valor do memloc
                    elemento2->campo1 = "LOAD";
                    reg1 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                    if(reg1 != -1){
                        elemento2->campo2 = reg1;
                        elemento2->flagCampo2 = 7;
                        elemento2->campo3 = 0;
                        elemento2->flagCampo3 = 0;
                        elemento2->campo4 = hashTable[p->campo2]->memloc;
                        elemento2->flagCampo4 = 8;
                        setRegistradorUsado(bancoDeRegistradores, reg1);
                        insereFinal(codigo_de_maquina, *elemento2);
                        posicaoMemoriaDeInstrucoes++;
                        imprimeQuadra(elemento2);
                    }
                }

                else if(p->flagVetor == 1){
                    //Carrega o valor do memloc
                    elemento2->campo1 = "LOAD";
                    reg1 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                    if(reg1 != -1){
                        elemento2->campo2 = reg1;
                        elemento2->flagCampo2 = 7;
                        elemento2->campo3 = 0;
                        elemento2->flagCampo3 = 0;
                        elemento2->campo4 = hashTable[p->campo2]->memloc;
                        elemento2->flagCampo4 = 8;
                        setRegistradorUsado(bancoDeRegistradores, reg1);
                        insereFinal(codigo_de_maquina, *elemento2);
                        posicaoMemoriaDeInstrucoes++;
                    }
                }
                break;
            //Char
            case 4:
                break;
            //Label
            case 5:
                break;
            //Quantidade de parametros
            case 6:
                break;
            //Inativo
            case -1:
                break;
        }

        switch (p->flagCampo3) {
            //Temporario
            case 1:
                reg2 = registradoresTemporarios[p->campo3];
                break;

            //Constante
            case 2:
                //Carrega a constante em um reg
                elemento2->campo1 = "LOADI";
                elemento2->campo4 = p->campo3;
                elemento2->flagCampo4 = 2;
                elemento2->campo3 = 0;
                elemento2->flagCampo3 = 0;
                reg2 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                if(reg2 != -1){
                    elemento2->campo2 = reg2;
                    setRegistradorUsado(bancoDeRegistradores, reg2);
                    elemento2->flagCampo2 = 7;
                    insereFinal(codigo_de_maquina, *elemento2);
                    posicaoMemoriaDeInstrucoes++;
                    quadraReset(elemento2);
                }
                break;

            //Hash
            case 3:
                elemento2->campo1 = "LOAD";
                hashIndex = p->campo3;
                b = hashTable[hashIndex];
                elemento2->campo4 = b->memloc;
                elemento2->flagCampo4 = 8;
                reg2 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                elemento2->flagCampo3 = 0;
                if(reg2 != -1){
                    elemento2->campo2 = reg2;
                    setRegistradorUsado(bancoDeRegistradores, reg2);
                    elemento2->flagCampo2 = 7;
                    insereFinal(codigo_de_maquina, *elemento2);
                    posicaoMemoriaDeInstrucoes++;
                    imprimeQuadra(elemento2);
                }

                break;
            //Char
            case 4:
                break;
            //Label
            case 5:
                break;
            //Quantidade de parametros
            case 6:
                break;
            //Inativo
            case -1:
                break;
        }

        switch (p->flagCampo4) {
            //Vazio
            case 0:
                break;
            //Temporario
            case 1:

                reg3 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                registradoresTemporarios[p->campo4] = reg3;
                setRegistradorUsado(bancoDeRegistradores, reg3);
                break;

            //Constante
            case 2:
                break;

            //Hash
            case 3:
                if(p->flagCampo2 == 1){
                    reg3 = reg1;
                }
                // // Atribuicao do tipo: var1 = var2
                // if(p->flagVetor == 0 && p->flagCampo2 == 3 || p->flagCampo2 == 2){
                // 	elemento2->campo1 = "LOADI";
                // 	hashIndex = p->campo4;
                // 	b = hashTable[hashIndex];
                // 	elemento2->campo4 = b->memloc;
                // 	elemento2->flagCampo4 = 8;
                // 	elemento2->flagCampo3 = 0;
                // 	elemento2->campo2 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                // 	elemento2->flagCampo2 = 7;
                // 	elemento2->campo3 = 0;
                // 	insereFinal(codigo_de_maquina, *elemento2);
                // 	posicaoMemoriaDeInstrucoes++;
                // }
                break;

            //Char
            case 4:
                break;
            //Label
            case 5:
                break;
            //Quantidade de parametros
            case 6:
                break;
            //Inativo
            case -1:
                break;
        }

        // Atribuicao de variavel var1 = 5 ou var1 = var2
        if(p->flagVetor == 0 && p->flagCampo3 == 0 && p->flagCampo4 == 3){
            elemento2->campo1 = "STORE";
            elemento2->campo2 = reg3;
            elemento2->campo3 = 0;
            elemento2->campo4 = hashTable[p->campo4]->memloc;
            elemento2->flagCampo2 = 7;
            elemento2->flagCampo3 = 0;
            elemento2->flagCampo4 = 8;
            insereFinal(codigo_de_maquina, *elemento2);
            posicaoMemoriaDeInstrucoes++;
            setRegistradorLivre(bancoDeRegistradores, reg3);
        }
        else if(p->flagVetor == 1){
            if(p->vetorPorReferencia == 1){
                elemento2->campo1 = "LOAD";
                reg3 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                elemento2->campo2 = reg3;
                elemento2->campo3 = 0;
                elemento2->campo4 = hashTable[p->campo4]->memloc;
                elemento2->flagCampo2 = 7;
                elemento2->flagCampo3 = 0;
                elemento2->flagCampo4 = 8;
                insereFinal(codigo_de_maquina, *elemento2);
                posicaoMemoriaDeInstrucoes++;
                setRegistradorUsado(bancoDeRegistradores, reg3);

                //Calcula o descolamento
                elemento2->campo1 = "ADD";
                reg4 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                elemento2->campo2 = reg4;
                elemento2->campo3 = reg3;
                elemento2->campo4 = reg2;
                elemento2->flagCampo2 = 7;
                elemento2->flagCampo3 = 7;
                elemento2->flagCampo4 = 7;
                insereFinal(codigo_de_maquina, *elemento2);
                posicaoMemoriaDeInstrucoes++;
                // quadraReset(elemento2);


                elemento2->campo1 = "STORER";
                elemento2->campo4 = reg1;
                elemento2->campo3 = 0;
                elemento2->campo2 = reg4;
                elemento2->flagCampo2 = 7;
                elemento2->flagCampo3 = 0;
                elemento2->flagCampo4 = 7;
                insereFinal(codigo_de_maquina, *elemento2);
                posicaoMemoriaDeInstrucoes++;
                setRegistradorLivre(bancoDeRegistradores, reg3);

            }
            else if(p->vetorPorReferencia == 0){
                //Calcula o descolamento

                if(p->flagCampo4 == 3){
                    elemento2->campo1 = "ADDI";
                    elemento2->campo4 = hashTable[p->campo4]->memloc;
                }
                else{
                    elemento2->campo4 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);;
                }

                elemento2->flagCampo4 = 8;
                elemento2->campo3 = reg2;
                elemento2->flagCampo3 = 7;
                reg3 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                if(reg3 != -1){
                    elemento2->campo2 = reg3;
                    setRegistradorUsado(bancoDeRegistradores, reg3);
                    elemento2->flagCampo2 = 7;
                    insereFinal(codigo_de_maquina, *elemento2);
                    posicaoMemoriaDeInstrucoes++;
                    // quadraReset(elemento2);
                }

                elemento2->campo1 = "STORER";
                elemento2->campo2 = reg3;
                elemento2->campo3 = 0;
                elemento2->campo4 = reg1;
                elemento2->flagCampo2 = 7;
                elemento2->flagCampo3 = 0;
                elemento2->flagCampo4 = 7;
                insereFinal(codigo_de_maquina, *elemento2);
                posicaoMemoriaDeInstrucoes++;
                setRegistradorLivre(bancoDeRegistradores, reg1);
                setRegistradorLivre(bancoDeRegistradores, reg2);
                setRegistradorLivre(bancoDeRegistradores, reg3);
            }
        }
        else if(p->flagVetor == 2){
            //Calcula o descolamento
            elemento2->campo1 = "ADD";
            reg4 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
            if(reg4 != -1){
                elemento2->campo2 = reg4;
                setRegistradorUsado(bancoDeRegistradores, reg4);
                elemento2->flagCampo2 = 7;
                elemento2->campo3 = reg2;
                elemento2->campo4 = reg1;
                elemento2->flagCampo3 = 7;
                elemento2->flagCampo4 = 7;
                insereFinal(codigo_de_maquina, *elemento2);
                posicaoMemoriaDeInstrucoes++;
                imprimeQuadra(elemento2);

            }

            setRegistradorLivre(bancoDeRegistradores, reg1);
            setRegistradorLivre(bancoDeRegistradores, reg2);

            reg1 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
            setRegistradorUsado(bancoDeRegistradores, reg1);

            //Load que carrega o dado na memoria do parametro
            elemento2->campo1 = "LOADR";
            elemento2->campo2 = reg1; //Conterá o dado
            elemento2->campo4 = reg4;
            elemento2->campo3 = 0;
            elemento2->flagCampo2 = 7;
            elemento2->flagCampo3 = 0;
            elemento2->flagCampo4 = 7;
            insereFinal(codigo_de_maquina, *elemento2);
            posicaoMemoriaDeInstrucoes++;
            //reg1 = reg3;
            registradoresTemporarios[p->campo4] = reg1;
            setRegistradorLivre(bancoDeRegistradores, reg2);
            setRegistradorLivre(bancoDeRegistradores, reg4);
            vetorPorReferencia = 1;
        }
    }
    else if(!strcmp(p->campo1, "igual")){

        switch (p->flagCampo2) {
            //Vazio
            case 0:
                break;
            //Temporario
            case 1:
                reg1 = registradoresTemporarios[p->campo2];
                break;

            //Constante
            case 2:
                elemento2->campo1 = "LOADI";
                elemento2->campo4 = p->campo2;
                elemento2->flagCampo4 = 2;
                elemento2->flagCampo3 = 0;
                elemento2->campo3 = 0;
                reg1 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                if(reg1 != -1){
                    elemento2->campo2 = reg1;
                    setRegistradorUsado(bancoDeRegistradores, reg1);
                    elemento2->flagCampo2 = 7;
                    insereFinal(codigo_de_maquina, *elemento2);
                    posicaoMemoriaDeInstrucoes++;
                }
                break;

            //Hash
            case 3:
                elemento2->campo1 = "LOAD";
                hashIndex = p->campo2;
                b = hashTable[hashIndex];
                elemento2->campo4 = b->memloc;
                elemento2->flagCampo4 = 8;
                elemento2->flagCampo3 = 0;
                elemento2->campo3 = 0;
                reg1 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                if(reg1 != -1){
                    elemento2->flagCampo2 = 7;
                    elemento2->campo2 = reg1;
                    setRegistradorUsado(bancoDeRegistradores, reg1);
                    insereFinal(codigo_de_maquina, *elemento2);
                    posicaoMemoriaDeInstrucoes++;
                }
                break;
            //Char
            case 4:
                break;
            //Label
            case 5:
                break;
            //Quantidade de parametros
            case 6:
                break;
            //Inativo
            case -1:
                break;
        }

        switch (p->flagCampo3) {
            //Vazio
            case 0:
                break;
            //Temporario
            case 1:
                break;

            //Constante
            case 2:
                elemento2->campo1 = "LOADI";
                elemento2->campo4 = p->campo3;
                elemento2->flagCampo4 = 2;
                elemento2->campo3 = 0;
                elemento2->flagCampo3 = 0;
                reg2 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                if(reg2 != -1){
                    elemento2->campo2 = reg2;
                    setRegistradorUsado(bancoDeRegistradores, reg2);
                    elemento2->flagCampo2 = 7;
                    insereFinal(codigo_de_maquina, *elemento2);
                    posicaoMemoriaDeInstrucoes++;
                    quadraReset(elemento2);
                }
                break;

            //Hash
            case 3:
                elemento2->campo1 = "LOAD";
                hashIndex = p->campo3;
                b = hashTable[hashIndex];
                elemento2->campo4 = b->memloc;
                elemento2->flagCampo4 = 8;
                elemento2->flagCampo3 = 0;
                elemento2->campo3 = 0;
                reg2 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                if(reg2 != -1){
                    elemento2->flagCampo2 = 7;
                    elemento2->campo2 = reg2;
                    setRegistradorUsado(bancoDeRegistradores, reg2);
                    insereFinal(codigo_de_maquina, *elemento2);
                    posicaoMemoriaDeInstrucoes++;
                }

                break;
            //Char
            case 4:
                break;
            //Label
            case 5:
                break;
            //Quantidade de parametros
            case 6:
                break;
            //Inativo
            case -1:
                break;
        }

        switch (p->flagCampo4) {
            //Vazio
            case 0:
                break;
            //Temporario
            case 1:
                reg3 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                registradoresTemporarios[p->campo4] = reg3;
                setRegistradorUsado(bancoDeRegistradores, reg3);
                break;

            //Constante
            case 2:
                break;

            //Hash
            case 3:
                break;
            //Char
            case 4:
                break;
            //Label
            case 5:
                break;
            //Quantidade de parametros
            case 6:
                break;
            //Inativo
            case -1:
                break;
        }

        flagDiferente = 1;
        elemento2->campo1 = "SET";
        elemento2->campo2 = reg3;
        elemento2->campo3 = reg2;
        elemento2->campo4 = reg1;
        elemento2->flagCampo2 = 7;
        elemento2->flagCampo3 = 7;
        elemento2->flagCampo4 = 7;
        insereFinal(codigo_de_maquina, *elemento2);
        posicaoMemoriaDeInstrucoes++;
        setRegistradorLivre(bancoDeRegistradores, reg1);
        setRegistradorLivre(bancoDeRegistradores, reg2);
    }
    else if( (!strcmp(p->campo1, "menorI")) || (!strcmp(p->campo1, "maiorI")) ){

        switch (p->flagCampo2) {
            //Vazio
            case 0:
                break;
            //Temporario
            case 1:
                reg1 = registradoresTemporarios[p->campo2];
                break;

            //Constante
            case 2:
                //Carrega a constante em um reg
                elemento2->campo1 = "LOADI";
                elemento2->campo4 = p->campo2;
                elemento2->flagCampo4 = 2;
                elemento2->campo3 = 0;
                elemento2->flagCampo3 = 0;
                reg1 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                if(reg1 != -1){
                    elemento2->campo2 = reg1;
                    setRegistradorUsado(bancoDeRegistradores, reg1);
                    elemento2->flagCampo2 = 7;
                    insereFinal(codigo_de_maquina, *elemento2);
                    posicaoMemoriaDeInstrucoes++;
                    // quadraReset(elemento2);
                }
                break;

            //Hash
            case 3:
                elemento2->campo1 = "LOAD";
                hashIndex = p->campo2;
                b = hashTable[hashIndex];
                elemento2->campo4 = b->memloc;
                elemento2->flagCampo4 = 8;
                elemento2->flagCampo3 = 0;
                elemento2->campo3 = 0;
                reg1 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                if(reg1 != -1){
                    elemento2->flagCampo2 = 7;
                    elemento2->campo2 = reg1;
                    setRegistradorUsado(bancoDeRegistradores, reg1);
                    insereFinal(codigo_de_maquina, *elemento2);
                    posicaoMemoriaDeInstrucoes++;
                }
                break;

                break;
            //Char
            case 4:
                break;
            //Label
            case 5:
                break;
            //Quantidade de parametros
            case 6:
                break;
            //Inativo
            case -1:
                break;
        }

        switch (p->flagCampo3) {
            //Vazio
            case 0:
                break;
            //Temporario
            case 1:
                reg2 = registradoresTemporarios[p->campo3];
                break;

            //Constante
            case 2:
                //Carrega a constante em um reg
                elemento2->campo1 = "LOADI";
                elemento2->campo4 = p->campo3;
                elemento2->flagCampo4 = 2;
                elemento2->campo3 = 0;
                elemento2->flagCampo3 = 0;
                reg2 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                if(reg2 != -1){
                    elemento2->campo2 = reg2;
                    setRegistradorUsado(bancoDeRegistradores, reg2);
                    elemento2->flagCampo2 = 7;
                    insereFinal(codigo_de_maquina, *elemento2);
                    posicaoMemoriaDeInstrucoes++;
                    // quadraReset(elemento2);
                }
                break;

            //Hash
            case 3:
                elemento2->campo1 = "LOAD";
                hashIndex = p->campo3;
                b = hashTable[hashIndex];
                elemento2->campo4 = b->memloc;
                elemento2->flagCampo4 = 8;
                elemento2->flagCampo3 = 0;
                elemento2->campo3 = 0;
                reg2 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                if(reg2 != -1){
                    elemento2->flagCampo2 = 7;
                    elemento2->campo2 = reg2;
                    setRegistradorUsado(bancoDeRegistradores, reg2);
                    insereFinal(codigo_de_maquina, *elemento2);
                    posicaoMemoriaDeInstrucoes++;
                }

                break;
            //Char
            case 4:
                break;
            //Label
            case 5:
                break;
            //Quantidade de parametros
            case 6:
                break;
            //Inativo
            case -1:
                break;
        }

        switch (p->flagCampo4) {
            //Vazio
            case 0:
                break;
            //Temporario
            case 1:
                reg3 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                registradoresTemporarios[p->campo4] = reg3;
                setRegistradorUsado(bancoDeRegistradores, reg3);
                break;

            //Constante
            case 2:
                break;

            //Hash
            case 3:
                hashIndex = p->campo4;
                b = hashTable[hashIndex];

                break;
            //Char
            case 4:
                break;
            //Label
            case 5:
                break;
            //Quantidade de parametros
            case 6:
                break;
            //Inativo
            case -1:
                break;
        }

        if(!strcmp(p->campo1, "menorI")){
            elemento2->campo1 = "SLE";
            elemento2->campo2 = reg3;
            elemento2->campo3 = reg1;
            elemento2->campo4 = reg2;
            flagDiferente = 1;
        }
        else{
            elemento2->campo1 = "SHE";
            elemento2->campo2 = reg3;
            elemento2->campo3 = reg1;
            elemento2->campo4 = reg2;
            flagDiferente = 1;
        }


        elemento2->flagCampo2 = 7;
        elemento2->flagCampo3 = 7;
        elemento2->flagCampo4 = 7;
        insereFinal(codigo_de_maquina, *elemento2);
        posicaoMemoriaDeInstrucoes++;
        quadraReset(elemento2);
        setRegistradorLivre(bancoDeRegistradores, reg1);
        setRegistradorLivre(bancoDeRegistradores, reg2);
    }
    else if(!strcmp(p->campo1, "dif")){
        flagDiferente = 0;
        switch (p->flagCampo2) {
            //Vazio
            case 0:
                break;
            //Temporario
            case 1:
                break;

            //Constante
            case 2:
                //Carrega a constante em um reg
                elemento2->campo1 = "LOADI";
                elemento2->campo4 = p->campo2;
                elemento2->flagCampo4 = 2;
                elemento2->campo3 = 0;
                elemento2->flagCampo3 = 0;
                reg1 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                if(reg1 != -1){
                    elemento2->campo2 = reg1;
                    setRegistradorUsado(bancoDeRegistradores, reg1);
                    elemento2->flagCampo2 = 7;
                    insereFinal(codigo_de_maquina, *elemento2);
                    posicaoMemoriaDeInstrucoes++;
                    // quadraReset(elemento2);
                }
                break;

            //Hash
            case 3:
                elemento2->campo1 = "LOAD";
                hashIndex = p->campo2;
                b = hashTable[hashIndex];
                elemento2->campo4 = b->memloc;
                elemento2->flagCampo4 = 8;
                elemento2->flagCampo3 = 0;
                elemento2->campo3 = 0;
                reg1 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                if(reg1 != -1){
                    elemento2->flagCampo2 = 7;
                    elemento2->campo2 = reg1;
                    setRegistradorUsado(bancoDeRegistradores, reg1);
                    insereFinal(codigo_de_maquina, *elemento2);
                    posicaoMemoriaDeInstrucoes++;
                }

                break;
            //Char
            case 4:
                break;
            //Label
            case 5:
                break;
            //Quantidade de parametros
            case 6:
                break;
            //Inativo
            case -1:
                break;
        }

        switch (p->flagCampo3) {
            //Vazio
            case 0:
                break;
            //Temporario
            case 1:
                break;

            //Constante
            case 2:
                //Carrega a constante em um reg
                elemento2->campo1 = "LOADI";
                elemento2->campo4 = p->campo3;
                elemento2->flagCampo4 = 2;
                elemento2->campo3 = 0;
                elemento2->flagCampo3 = 0;
                reg2 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                if(reg2 != -1){
                    elemento2->campo2 = reg2;
                    setRegistradorUsado(bancoDeRegistradores, reg2);
                    elemento2->flagCampo2 = 7;
                    insereFinal(codigo_de_maquina, *elemento2);
                    posicaoMemoriaDeInstrucoes++;
                    // quadraReset(elemento2);
                }
                break;

            //Hash
            case 3:
                elemento2->campo1 = "LOAD";
                hashIndex = p->campo3;
                b = hashTable[hashIndex];
                elemento2->campo4 = b->memloc;
                elemento2->flagCampo4 = 8;
                reg2 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                elemento2->flagCampo3 = 0;
                if(reg2 != -1){
                    elemento2->campo2 = reg2;
                    setRegistradorUsado(bancoDeRegistradores, reg2);
                    elemento2->flagCampo2 = 7;
                    insereFinal(codigo_de_maquina, *elemento2);
                    posicaoMemoriaDeInstrucoes++;
                }
                break;
            //Char
            case 4:
                break;
            //Label
            case 5:
                break;
            //Quantidade de parametros
            case 6:
                break;
            //Inativo
            case -1:
                break;
        }

        switch (p->flagCampo4) {
            //Vazio
            case 0:
                break;
            //Temporario
            case 1:
                reg3 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                registradoresTemporarios[p->campo4] = reg3;
                setRegistradorUsado(bancoDeRegistradores, reg3);
                break;

            //Constante
            case 2:
                break;

            //Hash
            case 3:
                hashIndex = p->campo4;
                b = hashTable[hashIndex];

                break;
            //Char
            case 4:
                break;
            //Label
            case 5:
                break;
            //Quantidade de parametros
            case 6:
                break;
            //Inativo
            case -1:
                break;
        }

        elemento2->campo1 = "SET";
        elemento2->campo2 = reg3;
        elemento2->campo3 = reg2;
        elemento2->campo4 = reg1;
        elemento2->flagCampo2 = 7;
        elemento2->flagCampo3 = 7;
        elemento2->flagCampo4 = 7;
        insereFinal(codigo_de_maquina, *elemento2);
        posicaoMemoriaDeInstrucoes++;
        setRegistradorLivre(bancoDeRegistradores, reg1);
        setRegistradorLivre(bancoDeRegistradores, reg2);

    }
    else if((!strcmp(p->campo1, "menor")) ||  (!strcmp(p->campo1, "maior")) ){

        switch (p->flagCampo2) {
            //Vazio
            case 0:
                break;
            //Temporario
            case 1:
                break;

            //Constante
            case 2:
                //Carrega a constante em um reg
                elemento2->campo1 = "LOADI";
                elemento2->campo4 = p->campo2;
                elemento2->flagCampo4 = 2;
                elemento2->campo3 = 0;
                elemento2->flagCampo3 = 0;
                reg1 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                if(reg1 != -1){
                    elemento2->campo2 = reg1;
                    setRegistradorUsado(bancoDeRegistradores, reg1);
                    elemento2->flagCampo2 = 7;
                    insereFinal(codigo_de_maquina, *elemento2);
                    posicaoMemoriaDeInstrucoes++;
                    // quadraReset(elemento2);
                }
                break;

            //Hash
            case 3:
                elemento2->campo1 = "LOAD";
                hashIndex = p->campo2;
                b = hashTable[hashIndex];
                elemento2->campo4 = b->memloc;
                elemento2->flagCampo4 = 8;
                elemento2->flagCampo3 = 0;
                elemento2->campo3 = 0;
                reg1 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                if(reg1 != -1){
                    elemento2->flagCampo2 = 7;
                    elemento2->campo2 = reg1;
                    setRegistradorUsado(bancoDeRegistradores, reg1);
                    insereFinal(codigo_de_maquina, *elemento2);
                    posicaoMemoriaDeInstrucoes++;
                }

                break;
            //Char
            case 4:
                break;
            //Label
            case 5:
                break;
            //Quantidade de parametros
            case 6:
                break;
            //Inativo
            case -1:
                break;
        }

        switch (p->flagCampo3) {
            //Vazio
            case 0:
                break;
            //Temporario
            case 1:
                reg2 = registradoresTemporarios[p->campo3];
                setRegistradorUsado(bancoDeRegistradores, reg2);
                break;

            //Constante
            case 2:
                //Carrega a constante em um reg
                elemento2->campo1 = "LOADI";
                elemento2->campo4 = p->campo3;
                elemento2->flagCampo4 = 2;
                elemento2->campo3 = 0;
                elemento2->flagCampo3 = 0;
                reg2 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                if(reg2 != -1){
                    elemento2->campo2 = reg2;
                    setRegistradorUsado(bancoDeRegistradores, reg2);
                    elemento2->flagCampo2 = 7;
                    insereFinal(codigo_de_maquina, *elemento2);
                    posicaoMemoriaDeInstrucoes++;
                    // quadraReset(elemento2);
                }
                break;
                break;

            //Hash
            case 3:
                elemento2->campo1 = "LOAD";
                hashIndex = p->campo3;
                b = hashTable[hashIndex];
                elemento2->campo4 = b->memloc;
                elemento2->flagCampo4 = 8;
                elemento2->flagCampo3 = 0;
                elemento2->campo3 = 0;
                reg2 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                if(reg2 != -1){
                    elemento2->flagCampo2 = 7;
                    elemento2->campo2 = reg2;
                    setRegistradorUsado(bancoDeRegistradores, reg2);
                    insereFinal(codigo_de_maquina, *elemento2);
                    posicaoMemoriaDeInstrucoes++;
                }
                break;
            //Char
            case 4:
                break;
            //Label
            case 5:
                break;
            //Quantidade de parametros
            case 6:
                break;
            //Inativo
            case -1:
                break;
        }

        switch (p->flagCampo4) {
            //Vazio
            case 0:
                break;
            //Temporario
            case 1:
                reg3 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                registradoresTemporarios[p->campo4] = reg3;
                setRegistradorUsado(bancoDeRegistradores, reg3);
                break;

            //Constante
            case 2:
                break;

            //Hash
            case 3:
                hashIndex = p->campo4;
                b = hashTable[hashIndex];
                if(b != NULL)
                    printf("tem gente\n" );
                printf("\na--%d--\n", b->memloc);
                break;
            //Char
            case 4:
                break;
            //Label
            case 5:
                break;
            //Quantidade de parametros
            case 6:
                break;
            //Inativo
            case -1:
                break;
        }

        if(!strcmp(p->campo1, "menor")){
            elemento2->campo1 = "SLT";
            flagDiferente = 1;
        }
        else if(!strcmp(p->campo1, "maior")){
            elemento2->campo1 = "SHT";
        }

        elemento2->campo2 = reg3;
        elemento2->campo3 = reg1;
        elemento2->campo4 = reg2;
        elemento2->flagCampo2 = 7;
        elemento2->flagCampo3 = 7;
        elemento2->flagCampo4 = 7;
        insereFinal(codigo_de_maquina, *elemento2);
        // imprimeQuadra(elemento2);
        posicaoMemoriaDeInstrucoes++;
        quadraReset(elemento2);
        setRegistradorLivre(bancoDeRegistradores, reg1);
        setRegistradorLivre(bancoDeRegistradores, reg2);


    }
    else if(!strcmp(p->campo1, "sum") || !strcmp(p->campo1, "sub")){

        switch (p->flagCampo2) {
            //Vazio
            case 0:
                break;
            //Temporario
            case 1:
                reg1 = registradoresTemporarios[p->campo2];
                break;

            //Constante
            case 2:
                elemento2->campo1 = "LOADI";
                elemento2->campo4 = p->campo2;
                elemento2->flagCampo4 = 2;
                elemento2->flagCampo3 = 0;
                elemento2->campo3 = 0;
                reg1 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                if(reg1 != -1){
                    elemento2->campo2 = reg1;
                    setRegistradorUsado(bancoDeRegistradores, reg1);
                    elemento2->flagCampo2 = 7;
                    insereFinal(codigo_de_maquina, *elemento2);
                    posicaoMemoriaDeInstrucoes++;
                }
                break;

            //Hash
            case 3:
                hashIndex = p->campo2;
                b = hashTable[hashIndex];
                elemento2->campo1 = "LOAD";
                elemento2->campo4 = b->memloc;
                elemento2->flagCampo4 = 8;
                elemento2->flagCampo3 = 0;
                elemento2->campo3 = 0;
                reg1 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                if(reg1 != -1){
                    elemento2->campo2 = reg1;
                    setRegistradorUsado(bancoDeRegistradores, reg1);
                    elemento2->flagCampo2 = 7;
                    insereFinal(codigo_de_maquina, *elemento2);
                    posicaoMemoriaDeInstrucoes++;
                }
                break;
            //Char
            case 4:
                break;
            //Label
            case 5:
                break;
            //Quantidade de parametros
            case 6:
                break;
            //Inativo
            case -1:
                break;
        }

        switch (p->flagCampo3) {
            //Vazio
            case 0:
                break;
            //Temporario
            case 1:
                reg2 = registradoresTemporarios[p->campo3];
                break;

            //Constante
            case 2:
                elemento2->campo1 = "LOADI";
                elemento2->campo4 = p->campo3;
                elemento2->flagCampo4 = 2;
                elemento2->flagCampo3 = 0;
                elemento2->campo3 = 0;
                reg2 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                if(reg2 != -1){
                    elemento2->campo2 = reg2;
                    setRegistradorUsado(bancoDeRegistradores, reg2);
                    elemento2->flagCampo2 = 7;
                    insereFinal(codigo_de_maquina, *elemento2);
                    posicaoMemoriaDeInstrucoes++;
                }
                break;
            //Hash
            case 3:
                elemento2->campo1 = "LOAD";
                hashIndex = p->campo3;
                b = hashTable[hashIndex];
                elemento2->campo4 = b->memloc;
                elemento2->flagCampo4 = 8;
                reg2 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                elemento2->campo3 = 0;
                elemento2->flagCampo3 = 0;
                if(reg2 != -1){
                    elemento2->campo2 = reg2;
                    setRegistradorUsado(bancoDeRegistradores, reg2);
                    elemento2->flagCampo2 = 7;
                    insereFinal(codigo_de_maquina, *elemento2);
                    posicaoMemoriaDeInstrucoes++;
                }
                break;
            //Char
            case 4:
                break;
            //Label
            case 5:
                break;
            //Quantidade de parametros
            case 6:
                break;
            //Inativo
            case -1:
                break;
        }

        switch (p->flagCampo4) {
            //Vazio
            case 0:
                break;
            //Temporario
            case 1:
                reg3 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                registradoresTemporarios[p->campo4] = reg3;
                setRegistradorUsado(bancoDeRegistradores, reg3);
                break;

            //Constante
            case 2:
                break;

            //Hash
            case 3:
                break;
            //Char
            case 4:
                break;
            //Label
            case 5:
                break;
            //Quantidade de parametros
            case 6:
                break;
            //Inativo
            case -1:
                break;
        }

        if(!strcmp(p->campo1, "sum")){
            elemento2->campo1 = "ADD";
        }
        else{
            elemento2->campo1 = "SUB";
        }

        elemento2->campo2 = reg3;
        elemento2->campo3 = reg1;
        elemento2->campo4 = reg2;
        elemento2->flagCampo2 = 7;
        elemento2->flagCampo3 = 7;
        elemento2->flagCampo4 = 7;
        insereFinal(codigo_de_maquina, *elemento2);
        posicaoMemoriaDeInstrucoes++;
        setRegistradorLivre(bancoDeRegistradores, reg1);
        setRegistradorLivre(bancoDeRegistradores, reg2);

    }
    else if(!strcmp(p->campo1, "mul")){

        switch (p->flagCampo2) {
            //Vazio
            case 0:
                break;
            //Temporario
            case 1:
                break;

            //Constante
            case 2:
                elemento2->campo1 = "LOADI";
                elemento2->campo4 = p->campo2;
                elemento2->flagCampo4 = 2;
                elemento2->flagCampo3 = 0;
                elemento2->campo3 = 0;
                reg1 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                if(reg1 != -1){
                    elemento2->campo2 = reg1;
                    setRegistradorUsado(bancoDeRegistradores, reg1);
                    elemento2->flagCampo2 = 7;
                    insereFinal(codigo_de_maquina, *elemento2);
                    posicaoMemoriaDeInstrucoes++;
                }

                //Carrega o contador
                elemento2->campo1 = "LOADI";
                reg2 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                if(reg2 != -1){
                    elemento2->campo2 = reg2;
                    elemento2->flagCampo2 = 7;
                    setRegistradorUsado(bancoDeRegistradores, reg2);
                    elemento2->campo3 = 0;
                    elemento2->flagCampo3 = 0;
                    elemento2->campo4 = 0;
                    elemento2->flagCampo4 = 2;
                    insereFinal(codigo_de_maquina, *elemento2);
                    posicaoMemoriaDeInstrucoes++;
                }

                break;

            //Hash
            case 3:
                elemento2->campo1 = "LOAD";
                hashIndex = p->campo2;
                b = hashTable[hashIndex];
                elemento2->campo4 = b->memloc;
                elemento2->flagCampo4 = 8;
                elemento2->flagCampo3 = 0;
                elemento2->campo3 = 0;
                reg1 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                if(reg1 != -1){
                    elemento2->flagCampo2 = 7;
                    elemento2->campo2 = reg1;
                    setRegistradorUsado(bancoDeRegistradores, reg1);
                    insereFinal(codigo_de_maquina, *elemento2);
                    posicaoMemoriaDeInstrucoes++;
                }

                //Carrega o contador
                elemento2->campo1 = "LOADI";
                reg2 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                if(reg2 != -1){
                    elemento2->campo2 = reg2;
                    elemento2->flagCampo2 = 7;
                    setRegistradorUsado(bancoDeRegistradores, reg2);
                    elemento2->campo3 = 0;
                    elemento2->flagCampo3 = 0;
                    elemento2->campo4 = 0;
                    elemento2->flagCampo4 = 2;
                    insereFinal(codigo_de_maquina, *elemento2);
                    posicaoMemoriaDeInstrucoes++;
                }

                break;
            //Char
            case 4:
                break;
            //Label
            case 5:
                break;
            //Quantidade de parametros
            case 6:
                break;
            //Inativo
            case -1:
                break;
        }

        switch (p->flagCampo3) {
            //Vazio
            case 0:
                break;
            //Temporario
            case 1:
                break;

            //Constante
            case 2:
                elemento2->campo1 = "LOADI";
                elemento2->campo4 = p->campo3;
                elemento2->flagCampo4 = 2;
                elemento2->flagCampo3 = 0;
                elemento2->campo3 = 0;
                reg3 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                if(reg3 != -1){
                    elemento2->campo2 = reg3;
                    setRegistradorUsado(bancoDeRegistradores, reg3);
                    elemento2->flagCampo2 = 7;
                    insereFinal(codigo_de_maquina, *elemento2);
                    posicaoMemoriaDeInstrucoes++;
                }
                break;

            //Hash
            case 3:
                elemento2->campo1 = "LOAD";
                hashIndex = p->campo3;
                b = hashTable[hashIndex];
                elemento2->campo4 = b->memloc;
                elemento2->flagCampo4 = 8;
                elemento2->flagCampo3 = 0;
                elemento2->campo3 = 0;
                reg3 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                if(reg3 != -1){
                    elemento2->flagCampo2 = 7;
                    elemento2->campo2 = reg3;
                    setRegistradorUsado(bancoDeRegistradores, reg3);
                    insereFinal(codigo_de_maquina, *elemento2);
                    posicaoMemoriaDeInstrucoes++;
                }

                break;
            //Char
            case 4:
                break;
            //Label
            case 5:
                break;
            //Quantidade de parametros
            case 6:
                break;
            //Inativo
            case -1:
                break;
        }

        switch (p->flagCampo4) {
            //Vazio
            case 0:
                break;
            //Temporario
            case 1:
                reg4 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                registradoresTemporarios[p->campo4] = reg4;
                setRegistradorUsado(bancoDeRegistradores, reg4);

                elemento2->campo1 = "LOADI";
                elemento2->campo2 = reg4;
                elemento2->flagCampo2 = 7;
                elemento2->campo3 = 0;
                elemento2->flagCampo3 = 0;
                elemento2->campo4 = 0;
                elemento2->flagCampo4 = 0;
                insereFinal(codigo_de_maquina, *elemento2);
                posicaoMemoriaDeInstrucoes++;

                break;

            //Constante
            case 2:
                break;

            //Hash
            case 3:
                break;
            //Char
            case 4:
                break;
            //Label
            case 5:
                break;
            //Quantidade de parametros
            case 6:
                break;
            //Inativo
            case -1:
                break;
        }

        //Incrementa contador
        elemento2->campo1 = "ADDI";
        elemento2->campo2 = reg2;
        elemento2->flagCampo2 = 7;
        elemento2->campo3 = reg2;
        elemento2->flagCampo3 = 7;
        elemento2->campo4 = 1;
        elemento2->flagCampo4 = 2;
        insereFinal(codigo_de_maquina, *elemento2);
        posicaoMemoriaDeInstrucoes++;


        //Calcula o valor da multiplicacao
        elemento2->campo1 = "ADD";
        elemento2->campo2 = reg4;
        elemento2->flagCampo2 = 7;
        elemento2->campo3 = reg4;
        elemento2->flagCampo3 = 7;
        elemento2->campo4 = reg3;
        elemento2->flagCampo4 = 7;
        insereFinal(codigo_de_maquina, *elemento2);
        posicaoMemoriaDeInstrucoes++;

        //Verifica se o resultado foi atingido
        elemento2->campo1 = "BNE";
        elemento2->campo2 = reg2;
        elemento2->flagCampo2 = 7;
        elemento2->campo3 = reg1;
        elemento2->flagCampo3 = 7;
        elemento2->campo4 = posicaoMemoriaDeInstrucoes - 2;
        elemento2->flagCampo4 = 9;
        insereFinal(codigo_de_maquina, *elemento2);
        posicaoMemoriaDeInstrucoes++;


        reg1 = reg4;
        registradoresTemporarios[p->campo4] = reg4;
        // setRegistradorLivre(bancoDeRegistradores, reg1);
        // setRegistradorLivre(bancoDeRegistradores, reg2);
        setRegistradorUsado(bancoDeRegistradores, reg4);
        // setRegistradorLivre(bancoDeRegistradores, reg5);

    }
    else if(!strcmp(p->campo1, "div")){

        switch (p->flagCampo2) {
            //Vazio
            case 0:
                break;
            //Temporario
            case 1:
                reg1 = registradoresTemporarios[p->campo2];
                break;

            //Constante
            case 2:
                // elemento2->campo1 = "LOADI num1  ";
                elemento2->campo1 = "LOADI";
                if((p->flagCampo3 == 2)){
                    if(p->campo2 >= p->campo3){
                        elemento2->campo4 = p->campo2;
                    }
                    else{
                        elemento2->campo4 = 0;
                    }
                }

                elemento2->flagCampo4 = 2;
                elemento2->flagCampo3 = 0;
                elemento2->campo3 = 0;
                reg1 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                if(reg1 != -1){
                    elemento2->campo2 = reg1;
                    setRegistradorUsado(bancoDeRegistradores, reg1);
                    elemento2->flagCampo2 = 7;
                    insereFinal(codigo_de_maquina, *elemento2);
                    posicaoMemoriaDeInstrucoes++;
                }

                // //Carrega o contador
                // elemento2->campo1 = "LOADI";
                // reg2 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                // if(reg2 != -1){
                // 	elemento2->campo2 = reg2;
                // 	elemento2->flagCampo2 = 7;
                // 	setRegistradorUsado(bancoDeRegistradores, reg2);
                // 	elemento2->campo3 = 0;
                // 	elemento2->flagCampo3 = 0;
                // 	elemento2->campo4 = 0;
                // 	elemento2->flagCampo4 = 2;
                // 	insereFinal(codigo_de_maquina, *elemento2);
                // 	posicaoMemoriaDeInstrucoes++;
                // }
                break;

            //Hash
            case 3:
                elemento2->campo1 = "LOAD";
                hashIndex = p->campo2;
                b = hashTable[hashIndex];
                elemento2->campo4 = b->memloc;
                elemento2->flagCampo4 = 8;
                elemento2->flagCampo3 = 0;
                elemento2->campo3 = 0;
                reg1 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                if(reg1 != -1){
                    elemento2->flagCampo2 = 7;
                    elemento2->campo2 = reg1;
                    setRegistradorUsado(bancoDeRegistradores, reg1);
                    insereFinal(codigo_de_maquina, *elemento2);
                    posicaoMemoriaDeInstrucoes++;
                }

                //Carrega o contador
                elemento2->campo1 = "LOADI";
                reg2 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                if(reg2 != -1){
                    elemento2->campo2 = reg2;
                    elemento2->flagCampo2 = 7;
                    setRegistradorUsado(bancoDeRegistradores, reg2);
                    elemento2->campo3 = 0;
                    elemento2->flagCampo3 = 0;
                    elemento2->campo4 = 0;
                    elemento2->flagCampo4 = 2;
                    insereFinal(codigo_de_maquina, *elemento2);
                    posicaoMemoriaDeInstrucoes++;
                }

                break;
            //Char
            case 4:
                break;
            //Label
            case 5:
                break;
            //Quantidade de parametros
            case 6:
                break;
            //Inativo
            case -1:
                break;
        }

        switch (p->flagCampo3) {
            //Vazio
            case 0:
                break;
            //Temporario
            case 1:
                reg2 = registradoresTemporarios[p->campo3];
                break;

            //Constante
            case 2:
                // elemento2->campo1 = "LOADI num2  ";
                elemento2->campo1 = "LOADI";
                elemento2->campo4 = p->campo3;
                elemento2->flagCampo4 = 2;
                elemento2->flagCampo3 = 0;
                elemento2->campo3 = 0;
                reg2 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                if(reg2 != -1){
                    elemento2->campo2 = reg2;
                    setRegistradorUsado(bancoDeRegistradores, reg2);
                    elemento2->flagCampo2 = 7;
                    insereFinal(codigo_de_maquina, *elemento2);
                    posicaoMemoriaDeInstrucoes++;
                }
                break;

            //Hash
            case 3:
                elemento2->campo1 = "LOAD";
                hashIndex = p->campo3;
                b = hashTable[hashIndex];
                elemento2->campo4 = b->memloc;
                elemento2->flagCampo4 = 8;
                elemento2->flagCampo3 = 0;
                elemento2->campo3 = 0;
                reg2 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                if(reg2 != -1){
                    elemento2->flagCampo2 = 7;
                    elemento2->campo2 = reg2;
                    setRegistradorUsado(bancoDeRegistradores, reg2);
                    insereFinal(codigo_de_maquina, *elemento2);
                    posicaoMemoriaDeInstrucoes++;
                }

                break;
            //Char
            case 4:
                break;
            //Label
            case 5:
                break;
            //Quantidade de parametros
            case 6:
                break;
            //Inativo
            case -1:
                break;
        }

        switch (p->flagCampo4) {
            //Vazio
            case 0:
                break;
            //Temporario
            case 1:
                // reg3 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                // registradoresTemporarios[p->campo4] = reg3;
                // setRegistradorUsado(bancoDeRegistradores, reg3);
                break;

            //Constante
            case 2:
                break;

            //Hash
            case 3:
                hashIndex = p->campo4;
                b = hashTable[hashIndex];
                if(b != NULL)
                    printf("tem gente\n" );
                printf("\na--%d--\n", b->memloc);
                break;
            //Char
            case 4:
                break;
            //Label
            case 5:
                break;
            //Quantidade de parametros
            case 6:
                break;
            //Inativo
            case -1:
                break;
        }

        // Carrega o comparador
        elemento2->campo1 = "LOADI";
        // elemento2->campo1 = "LOADI comp";
        reg4 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
        elemento2->campo2 = reg4;
        setRegistradorUsado(bancoDeRegistradores, reg4);
        elemento2->campo3 = 0;
        elemento2->campo4 = 0;
        elemento2->flagCampo2 = 7;
        elemento2->flagCampo3 = 0;
        elemento2->flagCampo4 = 2;
        insereFinal(codigo_de_maquina, *elemento2);
        posicaoMemoriaDeInstrucoes++;

        // Carrega o contador para resultado
        elemento2->campo1 = "LOADI";
        // elemento2->campo1 = "LOADI resul";
        reg5 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
        elemento2->campo2 = reg5;
        setRegistradorUsado(bancoDeRegistradores, reg5);
        elemento2->campo3 = 0;
        elemento2->campo4 = 0;
        elemento2->flagCampo2 = 7;
        elemento2->flagCampo3 = 0;
        elemento2->flagCampo4 = 2;
        insereFinal(codigo_de_maquina, *elemento2);
        posicaoMemoriaDeInstrucoes++;

        elemento2->campo1 = "SUB";
        elemento2->campo2 = reg1;
        elemento2->campo3 = reg1;
        elemento2->campo4 = reg2;
        elemento2->flagCampo2 = 7;
        elemento2->flagCampo3 = 7;
        elemento2->flagCampo4 = 7;
        insereFinal(codigo_de_maquina, *elemento2);
        posicaoMemoriaDeInstrucoes++;

        // Incrementa o contador
        elemento2->campo1 = "ADDI";
        elemento2->campo2 = reg5;
        elemento2->campo3 = reg5;
        elemento2->campo4 = 1;
        elemento2->flagCampo2 = 7;
        elemento2->flagCampo3 = 7;
        elemento2->flagCampo4 = 2;
        insereFinal(codigo_de_maquina, *elemento2);
        posicaoMemoriaDeInstrucoes++;

        elemento2->campo1 = "SHE";
        reg6 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
        elemento2->campo2 = reg6;
        setRegistradorUsado(bancoDeRegistradores, reg6);
        elemento2->campo3 = reg1;
        elemento2->campo4 = reg2;
        elemento2->flagCampo2 = 7;
        elemento2->flagCampo3 = 7;
        elemento2->flagCampo4 = 7;
        insereFinal(codigo_de_maquina, *elemento2);
        posicaoMemoriaDeInstrucoes++;

        elemento2->campo1 = "BNE";
        elemento2->campo2 = reg6;
        elemento2->flagCampo2 = 7;
        setRegistradorUsado(bancoDeRegistradores, reg2);
        elemento2->campo3 = reg4;
        elemento2->flagCampo3 = 7;
        elemento2->campo4 = posicaoMemoriaDeInstrucoes - 3;
        elemento2->flagCampo4 = 9;
        insereFinal(codigo_de_maquina, *elemento2);
        posicaoMemoriaDeInstrucoes++;

        registradoresTemporarios[p->campo4] = reg5;

        setRegistradorLivre(bancoDeRegistradores, reg1);
        setRegistradorLivre(bancoDeRegistradores, reg2);

    }
    else if(!strcmp(p->campo1, "if_f")){

        switch (p->flagCampo2) {
            //Vazio
            case 0:
                break;
            //Temporario
            case 1:
                // reg2 = registradoresTemporarios[p->campo2];
                elemento2->campo1 = "LOADI";
                elemento2->campo3 = 0;
                elemento2->flagCampo3 = 0;
                //Guarda o valor constante 1 ou 0
                if(flagDiferente == 1){
                    elemento2->campo4 = 1; //Constante 1
                }
                else if(flagDiferente == 0){

                    elemento2->campo4 = 0;
                }
                else{
                    elemento2->campo4 = 1;
                }

                elemento2->flagCampo4 = 2;
                reg1 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                if(reg1 != -1){
                    elemento2->campo2 = reg1;
                    elemento2->flagCampo2 = 7;
                    setRegistradorUsado(bancoDeRegistradores, reg1);
                    insereFinal(codigo_de_maquina, *elemento2);
                    posicaoMemoriaDeInstrucoes++;
                    quadraReset(elemento2);
                }
                break;

            //Constante
            case 2:
                break;

            //Hash
            case 3:
                break;
            //Char
            case 4:
                break;
            //Label
            case 5:
                break;
            //Quantidade de parametros
            case 6:
                break;
            //Inativo
            case -1:
                break;
        }

        switch (p->flagCampo3) {

            //Vazio
            case 0:
                break;
            //Temporario
            case 1:
                reg2 = registradoresTemporarios[p->campo3];
                break;

            //Constante
            case 2:
                break;

            //Hash
            case 3:
                break;
            //Char
            case 4:
                break;
            //Label
            case 5:
                qtd_instrucoes = p->campo3;
                break;
            //Quantidade de parametros
            case 6:
                break;
            //Inativo
            case -1:
                break;
        }

        switch (p->flagCampo4) {
            //Vazio
            case 0:
                break;
            //Temporario
            case 1:
                break;

            //Constante
            case 2:
                break;

            //Hash
            case 3:
                hashIndex = p->campo4;
                b = hashTable[hashIndex];
                if(b != NULL)
                    printf("tem gente\n" );
                printf("\na--%d--\n", b->memloc);
                break;
            //Char
            case 4:
                break;
            //Label
            case 5:
                break;
            //Quantidade de parametros
            case 6:
                break;
            //Inativo
            case -1:
                break;
        }

        //Conta as instrucoes dentro do if
        // aux = p;
        // qtd_instrucoes_aux = 2;
        // while(strcmp(aux->campo1, "lab") != 0){
        // 	qtd_instrucoes_aux++;
        // 	aux = aux->prox;
        // }

        //Gera a instrucao com o jump
        elemento2->campo1 = "BNE";
        elemento2->flagCampo2 = 7;
        elemento2->flagCampo3 = 7;
        elemento2->flagCampo4 = 5;
        elemento2->campo2 = reg1;
        elemento2->campo3 = reg3;
        reg3 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
        elemento2->campo4 = p->campo3;
        insereFinal(codigo_de_maquina, *elemento2);
        posicaoMemoriaDeInstrucoes++;
        quadraReset(elemento2);
        setRegistradorLivre(bancoDeRegistradores, reg1);
        setRegistradorLivre(bancoDeRegistradores, reg2);
        setRegistradorLivre(bancoDeRegistradores, reg3);
    }
    else if(!strcmp(p->campo1, "got")){

        switch (p->flagCampo2) {
            //Vazio
            case 0:
                break;
            //Temporario
            case 1:
                break;

            //Constante
            case 2:
                break;

            //Hash
            case 3:
                hashIndex = p->campo2;
                b = hashTable[hashIndex];
                if(b != NULL)
                    printf("tem gente\n" );
                printf("\n--%d--\n", b->memloc);
                break;
            //Char
            case 4:
                break;
            //Label
            case 5:
                elemento2->campo1 = "LOADI";
                reg1 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                if(reg1 != -1){
                    elemento2->campo2 = reg1;
                    elemento2->flagCampo2 = 7;
                    elemento2->campo3 = 0;
                    elemento2->flagCampo3 = 0;
                    elemento2->campo4 = p->campo2;
                    elemento2->flagCampo4 = 5;
                    insereFinal(codigo_de_maquina, *elemento2);
                    posicaoMemoriaDeInstrucoes++;
                    quadraReset(elemento2);
                }

                elemento2->campo1 = "JUMPR";
                elemento2->campo2 = reg1;
                elemento2->flagCampo2 = 7;
                elemento2->campo3 = reg1;
                elemento2->flagCampo3 = 7;
                elemento2->campo4 = 0;
                elemento2->flagCampo4 = 0;
                insereFinal(codigo_de_maquina, *elemento2);
                posicaoMemoriaDeInstrucoes++;

                break;
            //Quantidade de parametros
            case 6:
                break;
            //Inativo
            case -1:
                break;
        }

        switch (p->flagCampo3) {
            //Vazio
            case 0:
                break;
            //Temporario
            case 1:
                break;

            //Constante
            case 2:
                break;

            //Hash
            case 3:
                hashIndex = p->campo3;
                b = hashTable[hashIndex];
                if(b != NULL)
                    printf("tem gente\n" );
                printf("\n--%d--\n", b->memloc);
                break;
            //Char
            case 4:
                break;
            //Label
            case 5:
                break;
            //Quantidade de parametros
            case 6:
                break;
            //Inativo
            case -1:
                break;
        }

        switch (p->flagCampo4) {
            //Vazio
            case 0:
                break;
            //Temporario
            case 1:
                break;

            //Constante
            case 2:
                break;

            //Hash
            case 3:
                hashIndex = p->campo4;
                b = hashTable[hashIndex];
                if(b != NULL)
                    printf("tem gente\n" );
                printf("\na--%d--\n", b->memloc);
                break;
            //Char
            case 4:
                break;
            //Label
            case 5:
                break;
            //Quantidade de parametros
            case 6:
                break;
            //Inativo
            case -1:
                break;
        }
    }
    else if(!strcmp(p->campo1, "param")){
        aux = p->prox;

        //Checa se depois do parametro NAO sera uma chamada da funcao input()
        // caso seja, devera gerar a instrucao de LOAD de maneira diferente
        if(aux->campo2 != 13){

            switch (p->flagCampo2) {
                case 1:

                    break;
                case 2:
                    elemento2->campo1 = "LOADI";
                    elemento2->campo4 = p->campo2;
                    elemento2->flagCampo4 = 2;
                    elemento2->flagCampo3 = 0;
                    elemento2->campo3 = 0;
                    reg1 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                    if(reg1 != -1){
                        elemento2->campo2 = reg1;
                        setRegistradorUsado(bancoDeRegistradores, reg1);
                        elemento2->flagCampo2 = 7;
                        insereFinal(codigo_de_maquina, *elemento2);
                        posicaoMemoriaDeInstrucoes++;
                    }
                    break;

                case 3:
                    //Parametro eh um vetor. Entao carrega a referencia
                    if(p->flagCampo4 == 8){
                        hashIndex = p->campo2;
                        b = hashTable[hashIndex];
                        elemento2->campo1 = "LOAD";
                        elemento2->campo4 = b->memloc;
                        inputMemloc = b->memloc;
                        // elemento2->campo4 = 5000;
                        elemento2->flagCampo4 = 8;
                        elemento2->flagCampo3 = 0;
                        elemento2->campo3 = 0;
                        reg1 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                        if(reg1 != -1){
                            elemento2->campo2 = reg1;
                            setRegistradorUsado(bancoDeRegistradores, reg1);
                            elemento2->flagCampo2 = 7;
                            insereFinal(codigo_de_maquina, *elemento2);
                            posicaoMemoriaDeInstrucoes++;
                        }
                        quadraReset(elemento2);
                    }
                    else{
                        hashIndex = p->campo2;
                        b = hashTable[hashIndex];
                        elemento2->campo1 = "LOAD";
                        elemento2->campo4 = b->memloc;
                        inputMemloc = b->memloc;
                        // elemento2->campo4 = 5000;
                        elemento2->flagCampo4 = 8;
                        elemento2->flagCampo3 = 0;
                        elemento2->campo3 = 0;
                        reg1 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                        if(reg1 != -1){
                            elemento2->campo2 = reg1;
                            setRegistradorUsado(bancoDeRegistradores, reg1);
                            elemento2->flagCampo2 = 7;
                            insereFinal(codigo_de_maquina, *elemento2);
                            posicaoMemoriaDeInstrucoes++;
                        }
                        quadraReset(elemento2);
                    }
                    break;
            }

            switch (p->flagCampo4) {
                case 8:
                    // @TODO: dar store da referencia do vetor na posicao de memoria do vetor da funcao
                    break;
            }
            regOutput = reg1;
            regInput = reg1;
            elemento2->campo1 = "STORE";
            elemento2->campo2 = reg1;
            elemento2->campo3 = 0;
            elemento2->flagCampo2 = 7;
            elemento2->flagCampo3 = 0;
            elemento2->campo4 = p->campo4;
            elemento2->flagCampo4 = 8;
            insereFinal(codigo_de_maquina, *elemento2);
            posicaoMemoriaDeInstrucoes++;
            setRegistradorLivre(bancoDeRegistradores, reg1);
            quadraReset(elemento2);

            if(vetorPorReferencia){
                // reg1 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                // //Carrega o endereco de memoria do vetor original
                // elemento2->campo1 = "MOVE";
                // elemento2->campo2 = reg1;
                // elemento2->campo3 = 0;
                // elemento2->flagCampo2 = 7;
                // elemento2->flagCampo3 = 0;
                // elemento2->campo4 = reg3; //Endereco de memoria do vetor original
                // elemento2->flagCampo4 = 7;
                // insereFinal(codigo_de_maquina, *elemento2);
                // posicaoMemoriaDeInstrucoes++;
                // quadraReset(elemento2);
                //
                // // Grava o endereco de memoria do vetor original na memoria do
                // // vetor da funcao
                // elemento2->campo1 = "STORE";
                // elemento2->campo2 = reg1;
                // elemento2->campo3 = 0;
                // elemento2->campo4 = p->campo4 + 1;
                // elemento2->flagCampo2 = 7;
                // elemento2->flagCampo3 = 0;
                // elemento2->flagCampo4 = 8;
                // insereFinal(codigo_de_maquina, *elemento2);
                // posicaoMemoriaDeInstrucoes++;
                // quadraReset(elemento2);
            }
        }

        // Caso a proxima instrucao seja uma chamada da funcao input()
        else{
            switch (p->flagCampo2) {
                case 1:
                    inputMemloc = p->campo2;
                    break;
                case 3:
                    hashIndex = p->campo2;
                    b = hashTable[hashIndex];
                    inputMemloc = b->memloc;

                    break;
            }
        }
    }
    else if(!strcmp(p->campo1, "call")){

        chamadaDeFuncao = 1;

        //Chamada da funcao output()
        if(p->campo2 == 123){
            elemento2->campo1 = "MOVE";
            elemento2->campo2 = fimDoBancoDeRegistradores;
            elemento2->campo3 = 0;
            elemento2->campo4 = regOutput;
            elemento2->flagCampo2 = 7;
            elemento2->flagCampo3 = 0;
            elemento2->flagCampo4 = 7;
            insereFinal(codigo_de_maquina, *elemento2);
            posicaoMemoriaDeInstrucoes++;
            regOutput = -1;
        }

        //Carrega o valor a ser gravado na memoria em um registrador
        // elemento2->campo1 = "LOADI end de ret";
        elemento2->campo1 = "LOADI";
        reg2 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
        if(reg2 != -1){
            elemento2->campo2 = reg2;
            elemento2->campo3 = 0;

            hashIndex = p->campo2;
            b = hashTable[hashIndex];

            elemento2->campo4 = posicaoMemoriaDeInstrucoes + 4;
            elemento2->flagCampo2 = 7;
            elemento2->flagCampo3 = 0;
            elemento2->flagCampo4 = 9;
            insereFinal(codigo_de_maquina, *elemento2);
            posicaoMemoriaDeInstrucoes++;
            quadraReset(elemento2);
        }

        //Carrega a posicao de volta na posicao do memloc da funcao chamada
        // elemento2->campo1 = "STORE end de ret";
        elemento2->campo1 = "STORE";
        elemento2->campo2 = reg2;
        elemento2->campo3 = 0;
        // elemento2->campo4 = posicaoMemoriaDeInstrucoes;
        elemento2->campo4 = hashTable[p->campo2]->memloc;
        elemento2->flagCampo2 = 7;
        elemento2->flagCampo3 = 0;
        elemento2->flagCampo4 = 8;
        insereFinal(codigo_de_maquina, *elemento2);
        quadraReset(elemento2);
        setRegistradorLivre(bancoDeRegistradores, reg2);
        posicaoMemoriaDeInstrucoes++;

        //Carrega a posicao de jump em um registrador
        // elemento2->campo1 = "LOADI end de j";
        elemento2->campo1 = "LOADI";
        reg2 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
        if(reg2 != -1){
            elemento2->campo2 = reg2;
            elemento2->campo3 = 0;

            hashIndex = p->campo2;
            b = hashTable[hashIndex];

            // elemento2->campo4 = posicaoDeFuncoes[p->campo2] - 1;

            // elemento2->campo4 = posicaoDeFuncoes[p->campo2] + 6;
            elemento2->campo4 = posicaoDeFuncoes[p->campo2];
            elemento2->flagCampo2 = 7;
            elemento2->flagCampo3 = 0;
            elemento2->flagCampo4 = 9;
            insereFinal(codigo_de_maquina, *elemento2);
            posicaoMemoriaDeInstrucoes++;
            quadraReset(elemento2);
        }

        //Gera a instrucao de jump para a posicao na memoria de instrucoes
        elemento2->campo1 = "JUMPR";
        elemento2->campo2 = reg2;
        elemento2->campo3 = reg2;
        elemento2->campo4 = 0;
        hashIndex = p->campo2;
        b = hashTable[hashIndex];
        elemento2->campo4 = 0;
        elemento2->flagCampo2 = 7;
        elemento2->flagCampo3 = 7;
        elemento2->flagCampo4 = 0;
        insereFinal(codigo_de_maquina, *elemento2);
        posicaoMemoriaDeInstrucoes++;
        setRegistradorLivre(bancoDeRegistradores, reg2);
        quadraReset(elemento2);

        switch (p->flagCampo2) {
            //Indica a posicao da memoria da funcao chamada
            case 3:
                break;

        }

        //Indica a quantidade de parametros
        switch (p->flagCampo3) {
            case 0:
                break;
        }

        //Indica o temporario para armezenar o retorno
        switch (p->flagCampo4) {
            case 1:
                inputMemloc = p->campo4;
                funcaoComRetorno = 1;
                reg1 = registradoresTemporarios[p->campo2];
                elemento2->campo1 = "MOVE";
                hashIndex = p->campo2;
                b = hashTable[hashIndex];
                elemento2->campo4 = fimDoBancoDeRegistradores;
                elemento2->flagCampo4 = 7;
                reg1 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                elemento2->flagCampo3 = 0;
                elemento2->campo3 = 0;
                if(reg1 != -1){
                    elemento2->campo2 = reg1;
                    setRegistradorUsado(bancoDeRegistradores, reg1);
                    elemento2->flagCampo2 = 7;
                    insereFinal(codigo_de_maquina, *elemento2);
                    posicaoMemoriaDeInstrucoes++;
                    quadraReset(elemento2);
                }

                registradoresTemporarios[p->campo4] = reg1;
                break;
        }

        //Chamada da funcao input()
        if(p->campo2 == 13){
            // elemento2->campo1 = "STORE do input";
            elemento2->campo1 = "STORE";
            elemento2->campo2 = fimDoBancoDeRegistradores;
            elemento2->campo3 = 0;
            elemento2->campo4 = inputMemloc;
            elemento2->flagCampo2 = 7;
            elemento2->flagCampo3 = 0;
            elemento2->flagCampo4 = 8;
            insereFinal(codigo_de_maquina, *elemento2);
            posicaoMemoriaDeInstrucoes++;
            quadraReset(elemento2);
        }
    }
    else if(!strcmp(p->campo1, "ret")){
        funcaoComRetorno = 1;
        switch (p->flagCampo2) {
            case 1:
                //Carrega o retorno numa variavel fixa
                elemento2->campo1 = "MOVE";
                elemento2->campo4 = registradoresTemporarios[p->campo2];
                elemento2->flagCampo4 = 7;
                elemento2->campo3 = 0;
                elemento2->flagCampo3 = 0;
                // reg1 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);

                elemento2->flagCampo2 = 7;
                // elemento2->campo2 = fimDoBancoDeRegistradores - 1;
                elemento2->campo2 = fimDoBancoDeRegistradores;
                setRegistradorUsado(bancoDeRegistradores, fimDoBancoDeRegistradores);
                insereFinal(codigo_de_maquina, *elemento2);
                posicaoMemoriaDeInstrucoes++;

                //Pula de volta para a posicao de chamada
                elemento2->campo1 = "LOAD";
                elemento2->campo2 = reg1;
                elemento2->campo3 = 0;
                // elemento2->campo4 = memlocFuncaoAnterior;
                elemento2->campo4 = memlocFuncaoAtual;
                elemento2->flagCampo2 = 7;
                elemento2->flagCampo3 = 0;
                elemento2->flagCampo4 = 8;
                insereFinal(codigo_de_maquina, *elemento2);
                posicaoMemoriaDeInstrucoes++;

                elemento2->campo1 = "JUMPR";
                elemento2->campo2 = reg1;
                elemento2->campo3 = reg1;
                elemento2->campo4 = 0;
                elemento2->flagCampo2 = 7;
                elemento2->flagCampo3 = 7;
                elemento2->flagCampo4 = 0;
                insereFinal(codigo_de_maquina, *elemento2);
                posicaoMemoriaDeInstrucoes++;
            case 2:
                //Carrega o retorno numa variavel fixa
                elemento2->campo1 = "LOADI";
                elemento2->campo4 = p->campo2;
                elemento2->flagCampo4 = 8;
                elemento2->campo3 = 0;
                elemento2->flagCampo3 = 0;
                // reg1 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);

                elemento2->flagCampo2 = 7;
                // elemento2->campo2 = fimDoBancoDeRegistradores - 1;
                elemento2->campo2 = fimDoBancoDeRegistradores;
                setRegistradorUsado(bancoDeRegistradores, fimDoBancoDeRegistradores);
                insereFinal(codigo_de_maquina, *elemento2);
                posicaoMemoriaDeInstrucoes++;

                //Pula de volta para a posicao de chamada
                elemento2->campo1 = "LOAD";
                elemento2->campo2 = reg1;
                elemento2->campo3 = 0;
                // elemento2->campo4 = memlocFuncaoAnterior;
                elemento2->campo4 = memlocFuncaoAtual;
                elemento2->flagCampo2 = 7;
                elemento2->flagCampo3 = 0;
                elemento2->flagCampo4 = 8;
                insereFinal(codigo_de_maquina, *elemento2);
                posicaoMemoriaDeInstrucoes++;

                elemento2->campo1 = "JUMPR";
                elemento2->campo2 = reg1;
                elemento2->campo3 = reg1;
                elemento2->campo4 = 0;
                elemento2->flagCampo2 = 7;
                elemento2->flagCampo3 = 7;
                elemento2->flagCampo4 = 0;
                insereFinal(codigo_de_maquina, *elemento2);
                posicaoMemoriaDeInstrucoes++;
                break;
            case 3:

                // //Guarda o retorno
                // elemento2->campo1 = "STORE";
                // reg1 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
                // if(reg1 != -1){
                // 	elemento2->campo2 = reg1;
                // 	elemento2->campo3 = 0;
                // 	elemento2->campo4 = hashTable[p->campo2]->memloc;
                // 	elemento2->flagCampo2 = 7;
                // 	elemento2->flagCampo3 = 0;
                // 	elemento2->flagCampo4 = 8;
                // 	insereFinal(codigo_de_maquina, *elemento2);
                // 	posicaoMemoriaDeInstrucoes++;
                // }

                //Carrega o retorno numa variavel fixa
                elemento2->campo1 = "LOAD";
                hashIndex = p->campo2;
                b = hashTable[hashIndex];
                // elemento2->campo4 = b->memloc;
                // elemento2->campo4 = memlocFuncaoAnterior;
                elemento2->campo4 = hashTable[p->campo2]->memloc;
                elemento2->flagCampo4 = 8;
                elemento2->campo3 = 0;
                elemento2->flagCampo3 = 0;
                // reg1 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);

                elemento2->flagCampo2 = 7;
                // elemento2->campo2 = fimDoBancoDeRegistradores - 1;
                elemento2->campo2 = fimDoBancoDeRegistradores;
                setRegistradorUsado(bancoDeRegistradores, fimDoBancoDeRegistradores);
                insereFinal(codigo_de_maquina, *elemento2);
                posicaoMemoriaDeInstrucoes++;

                //Pula de volta para a posicao de chamada
                elemento2->campo1 = "LOAD";
                elemento2->campo2 = reg1;
                elemento2->campo3 = 0;
                // elemento2->campo4 = memlocFuncaoAnterior;
                elemento2->campo4 = memlocFuncaoAtual;
                elemento2->flagCampo2 = 7;
                elemento2->flagCampo3 = 0;
                elemento2->flagCampo4 = 8;
                insereFinal(codigo_de_maquina, *elemento2);
                posicaoMemoriaDeInstrucoes++;

                elemento2->campo1 = "JUMPR";
                elemento2->campo2 = reg1;
                elemento2->campo3 = reg1;
                elemento2->campo4 = 0;
                elemento2->flagCampo2 = 7;
                elemento2->flagCampo3 = 7;
                elemento2->flagCampo4 = 0;
                insereFinal(codigo_de_maquina, *elemento2);
                posicaoMemoriaDeInstrucoes++;
                break;
        }
    }
    else if(!strcmp(p->campo1, "vet")){

        // Guarda a posicao de memoria do vetor no proprio vetor
        elemento2->campo1 = "LOADI";
        reg1 = buscaRegistradorVazio(bancoDeRegistradores, BR_SIZE);
        elemento2->campo2 = reg1;
        elemento2->campo3 = 0;
        elemento2->campo4 = hashTable[p->campo2]->memloc;
        elemento2->flagCampo2 = 7;
        elemento2->flagCampo3 = 0;
        elemento2->flagCampo4 = 8;
        insereFinal(codigo_de_maquina, *elemento2);
        posicaoMemoriaDeInstrucoes++;
        quadraReset(elemento2);

        elemento2->campo1 = "STORE";
        elemento2->campo2 = reg1;
        elemento2->campo3 = 0;
        elemento2->campo4 = hashTable[p->campo2]->memloc;
        elemento2->flagCampo2 = 7;
        elemento2->flagCampo3 = 0;
        elemento2->flagCampo4 = 8;
        insereFinal(codigo_de_maquina, *elemento2);
        posicaoMemoriaDeInstrucoes++;
        quadraReset(elemento2);
    }

    p = p->prox;
}
